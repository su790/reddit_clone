// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String               @id @default(cuid())
  emailVerified DateTime?
  email         String               @unique
  image         String?
  name          String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  communities   UsersonCommunities[]
}

model Profile {
  id                 String  @id @default(cuid())
  username           String  @unique
  email              String  @unique
  avatar             String?
  display_name       String?
  banner_image       String?
  allow_follow       Boolean @default(true)
  profile_visibility Boolean @default(true)
  about              String? @default("how are you")
  userId             String  @unique
  User               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Community {
  id          String               @id @default(cuid())
  name        String               @unique
  type        communityType        @default(PUBLIC)
  nsfw        Boolean              @default(false)
  image       String?
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  users       UsersonCommunities[]
}

model UsersonCommunities {
  user          User?      @relation(fields: [userId], references: [id])
  userId        String
  community     Community? @relation(fields: [communityName], references: [name])
  communityName String
  role          roleType

  @@id([userId, communityName])
}

enum communityType {
  PUBLIC
  RESTRICTED
  PRIVATE
}

enum roleType {
  ADMIN
  USER
  MODERATOR
}
